# -*- coding: utf-8 -*-
"""지구과학 과제연구 찐최종본.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oXodDxVlV-4TTuB9AKRj2anFFvCJ1gZ0
"""

import tensorflow as tf        #LSTM model summary
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from keras.callbacks import EarlyStopping
import numpy as np  # module import
import pandas as pd
import requests
import datetime as dt 
import copy
import matplotlib.pyplot as plt
from scipy import stats

a = pd.read_csv('/content/drive/MyDrive/지학과제연구/상관계수 폴더/서대문구.csv')  #read_csv

a['아황산가스']=a['아황산가스'].fillna(method='ffill')   # data preprocessing
a['아황산가스']=a['아황산가스'].fillna(method='bfill')
a['일산화탄소']=a['일산화탄소'].fillna(method='ffill')
a['일산화탄소']=a['일산화탄소'].fillna(method='bfill')
a['오존']=a['오존'].fillna(method='ffill')
a['오존']=a['오존'].fillna(method='bfill')
a['이산화질소']=a['이산화질소'].fillna(method='ffill')
a['이산화질소']=a['이산화질소'].fillna(method='bfill')
a['PM2.5']=a['PM2.5'].fillna(method='ffill')
a['PM2.5']=a['PM2.5'].fillna(method='bfill')
a['PM10']=a['PM10'].fillna(method='ffill')
a['PM10']=a['PM10'].fillna(method='bfill')

from sklearn.preprocessing import MinMaxScaler             # Data Normalization
a.sort_index(ascending=False).reset_index(drop=False)

scaler = MinMaxScaler()
scale_cols = ['PM10', 'PM2.5', '일산화탄소', '이산화질소']
a_scaled = scaler.fit_transform(a[scale_cols])
a_scaled = pd.DataFrame(a_scaled)
a_scaled.columns = scale_cols

a_scaled_t = a_scaled.values   # Invert DataFrame to np.array

from sklearn.model_selection import train_test_split     # Invert data into train/test set
 
train, test = train_test_split(a_scaled_t, train_size = float(2/3), shuffle = False)


trainX,trainY = build_timeseries(train,0)  # Separation to X&Y
testX,testY = build_timeseries(test,0)

model1 = Sequential()
model1.add(LSTM(units=64, input_shape = (TIME_STEPS, trainX.shape[2])))
model1.add(Dense(units=32, activation='relu'))
model1.add(Dense(1, activation='relu'))
model1.compile(loss = 'mean_squared_error',optimizer = 'adam')

early_stop = EarlyStopping(monitor='loss', patience=5, verbose=1)      # traing data

model1.fit(trainX, trainY, epochs=100,
          batch_size=16, verbose=1, callbacks=[early_stop])

y_pred = model1.predict(testX, batch_size=16)  # scatter graph

y_pred_df = pd.DataFrame(y_pred)   # denormalization 
 
y_pred_df['a'] = 0
y_pred_df['b'] = 0
y_pred_df['c'] = 0


y_pred_trans = y_pred_df.values

y_pred_og = scaler.inverse_transform(y_pred_trans)

y_pred_ogdf = pd.DataFrame(y_pred_og)

y_pred_ogdf4 = y_pred_ogdf.drop(1, axis = 1)
y_pred_ogdf4 = y_pred_ogdf4.drop(2, axis = 1)
y_pred_ogdf4 = y_pred_ogdf4.drop(3, axis = 1)


y_df = pd.DataFrame(testY)

y_df['a'] = 0
y_df['b'] = 0
y_df['c'] = 0

y_trans = y_df.values
y_og = scaler.inverse_transform(y_trans)
y_og_df = pd.DataFrame(y_og)
y_og_df_2 = pd.DataFrame(y_og_df[0]) 
y_final = y_og_df_2.values


accuracy = np.sqrt(np.sum((y_pred_ogdf4-y_final)**2))      # accuracy 
accuracy_df = pd.DataFrame(accuracy) 

plt.plot(y_pred_ogdf4) # plotting
plt.plot(y_final)
plt.xlabel('time')
plt.ylabel('PM10')
plt.xticks(np.arange(400, 2559, 720), labels=[ 'Mar', 'April', 'May'])
plt. show

from sklearn.metrics import make_scorer
  
def rmsle(y_pred_ogdf4, y_final):
	# 넘파이로 배열 형태로 바꿔줌.  
  predicted_values = np.array(y_pred_ogdf4)
  actual_values = y_final
    
  # 예측값과 실제 값에 1을 더하고 로그를 씌어줌 
  log_predict = np.log(predicted_values + 1)
  log_actual = np.log(actual_values + 1)
    
  # 위에서 계산한 예측값에서 실측값을 빼주고 제곱해줌
  difference = log_predict - log_actual
  difference = np.square(difference)
    
  # 평균을 냄
  mean_difference = difference.mean()
    
  # 다시 루트를 씌움
  score = np.sqrt(mean_difference)  
    
  return score

rmsle(y_pred_ogdf4, y_final)

plt.figure(figsize=(10,8))
plt.plot(y_final, alpha = 0.7, color = 'r')
plt.xlabel('time')
plt.ylabel('PM10')
plt.xticks(np.arange(400, 2559, 720), labels=[ 'Mar', 'April', 'May'])
plt. show
plt.figure(figsize=(10,8))
plt.plot(y_pred_ogdf4, color = 'b') # plotting
plt.xlabel('time')
plt.ylabel('PM10')
plt.xticks(np.arange(400, 2559, 720), labels=[ 'Mar', 'April', 'May'])
plt. show

plt.figure(figsize=(20,8))
 # plotting
plt.plot(b_5)
plt.plot(b_8)
plt.plot(b_10, c='w')
plt.xlabel('time')
plt.ylabel('PM10')
plt.xticks(np.arange(4400, 6559, 720), labels=[ 'Mar', 'April', 'May'])
plt. show

b_6=y_final.reshape(-1)

y_og_df_2 = pd.DataFrame(y_og_df[0]) 
y_final = y_og_df_2.values

b_7 = y_pred_ogdf4.values

b_7 = b_7.reshape(-1)

b_10 = np.zeros(shape=(4396,))

b_9 = np.zeros(shape=(4396,))

b_8 = np.concatenate([b_9,b_7])